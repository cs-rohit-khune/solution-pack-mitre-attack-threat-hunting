{
    "@type": "Workflow",
    "triggerLimit": null,
    "name": "Generates Alerts for Event Triggered Execution",
    "aliasName": null,
    "tag": null,
    "description": "Demonstrates threat hunting scenario for the attacks using MITRE technique Event Triggered Execution [T1546] and generates demo Hunt, Alert and Technique\/Sub-Technique records for the same",
    "isActive": true,
    "debug": false,
    "singleRecordExecution": false,
    "remoteExecutableFlag": false,
    "parameters": [],
    "synchronous": false,
    "lastModifyDate": 1644165542,
    "collection": "\/api\/3\/workflow_collections\/35ba77a8-b970-4530-ac9d-b1ddc38ae755",
    "versions": [],
    "triggerStep": "\/api\/3\/workflow_steps\/a96360d8-f353-4e36-9e08-426e38e1138d",
    "steps": [
        {
            "@type": "WorkflowStep",
            "name": "Start",
            "description": null,
            "arguments": {
                "step_variables": {
                    "input": {
                        "params": []
                    }
                }
            },
            "status": null,
            "top": "30",
            "left": "125",
            "stepType": "\/api\/3\/workflow_step_types\/b348f017-9a94-471f-87f8-ce88b6a7ad62",
            "uuid": "a96360d8-f353-4e36-9e08-426e38e1138d",
            "id": 4468
        },
        {
            "@type": "WorkflowStep",
            "name": "Configuration",
            "description": null,
            "arguments": {
                "scenarioTitle": "{{vars.input.records[0].title}}",
                "useMockOutput": "{{globalVars.Demo_mode}}"
            },
            "status": null,
            "top": "165",
            "left": "125",
            "stepType": "\/api\/3\/workflow_step_types\/04d0cf46-b6a8-42c4-8683-60a7eaa69e8f",
            "uuid": "57c7cc16-8855-4a6c-ab28-c217390e82ce",
            "id": 4469
        },
        {
            "@type": "WorkflowStep",
            "name": "Get Alert from SIEM",
            "description": null,
            "arguments": {
                "arguments": {
                    "huntEnd": "{{arrow.get(vars.steps.Get_Hunt_Time_Range.input.huntEndDate).int_timestamp}}",
                    "huntStart": "{{arrow.get(vars.steps.Get_Hunt_Time_Range.input.huntStartDate).int_timestamp}}"
                },
                "apply_async": false,
                "step_variables": [],
                "workflowReference": "\/api\/3\/workflows\/27b1c8f5-3548-437e-b3dc-d8b19b988781"
            },
            "status": null,
            "top": "570",
            "left": "125",
            "stepType": "\/api\/3\/workflow_step_types\/74932bdc-b8b6-4d24-88c4-1a4dfbc524f3",
            "uuid": "e49fcad1-c386-4f37-9041-548dd3984e58",
            "id": 4470
        },
        {
            "@type": "WorkflowStep",
            "name": "Get Created Alert Data",
            "description": null,
            "arguments": {
                "@id": "{{((vars.steps.Create_and_Link_Alert | json_query('[].alert_data.\"@id\"')) | union([vars.steps.Create_Hunt_Record['@id']]) | union(vars.steps.Create_and_Link_Alert | json_query('[].technique_data'))) | flatten(levels=1) }}"
            },
            "status": null,
            "top": "840",
            "left": "125",
            "stepType": "\/api\/3\/workflow_step_types\/04d0cf46-b6a8-42c4-8683-60a7eaa69e8f",
            "uuid": "98252ae2-9b0f-411c-ba81-b86a53808453",
            "id": 4471
        },
        {
            "@type": "WorkflowStep",
            "name": "Get Hunt Time Range",
            "description": null,
            "arguments": {
                "type": "InputBased",
                "input": {
                    "schema": {
                        "title": "Enter Hunt Time Range",
                        "description": "Hunt Time Range",
                        "inputVariables": [
                            {
                                "name": "huntStartDate",
                                "type": "integer",
                                "label": "Hunt Start Date",
                                "title": "Date\/Time Field",
                                "usable": true,
                                "tooltip": "",
                                "dataType": "datetime",
                                "formType": "datetime",
                                "required": true,
                                "_expanded": true,
                                "mmdUpdate": true,
                                "collection": false,
                                "searchable": true,
                                "templateUrl": "app\/components\/form\/fields\/datetime.html",
                                "defaultValue": {
                                    "differenceType": "months",
                                    "differenceValue": -1
                                },
                                "_previousName": "untStartDate",
                                "lengthConstraint": false,
                                "allowedEncryption": false,
                                "allowedGridColumn": true,
                                "useRecordFieldDefault": false
                            },
                            {
                                "name": "huntEndDate",
                                "type": "integer",
                                "label": "Hunt End Date",
                                "title": "Date\/Time Field",
                                "usable": true,
                                "tooltip": "",
                                "dataType": "datetime",
                                "formType": "datetime",
                                "required": true,
                                "_expanded": true,
                                "mmdUpdate": true,
                                "collection": false,
                                "searchable": true,
                                "templateUrl": "app\/components\/form\/fields\/datetime.html",
                                "defaultValue": {
                                    "differenceType": "mins",
                                    "differenceValue": 1
                                },
                                "_previousName": "huntStartDate",
                                "lengthConstraint": false,
                                "allowedEncryption": false,
                                "allowedGridColumn": true,
                                "useRecordFieldDefault": false
                            }
                        ]
                    }
                },
                "record": "{{vars.input.records[0]['@id']}}",
                "resources": "scenario",
                "owner_detail": {
                    "isAssigned": false
                },
                "step_variables": [],
                "response_mapping": {
                    "options": [
                        {
                            "option": "Submit",
                            "primary": true,
                            "step_iri": "\/api\/3\/workflow_steps\/3b435f69-af2a-4cff-a85b-0c882a196145"
                        }
                    ],
                    "duplicateOption": false
                },
                "email_notification": {
                    "enabled": false,
                    "smtpParameters": []
                }
            },
            "status": null,
            "top": "300",
            "left": "125",
            "stepType": "\/api\/3\/workflow_step_types\/fc04082a-d7dc-4299-96fb-6837b1baa0fe",
            "uuid": "18d3fd35-6519-46a5-8a75-0477d9361ee2",
            "id": 4472
        },
        {
            "@type": "WorkflowStep",
            "name": "Create and Link Alert",
            "description": null,
            "arguments": {
                "for_each": {
                    "item": "{{vars.steps.Get_Alert_from_SIEM.step_output}}",
                    "parallel": false,
                    "condition": ""
                },
                "arguments": {
                    "MD5": "{% if vars.item._source.event_data.Hashes %}{{ (vars.item._source.event_data.Hashes.split(\"MD5=\")[1].split(',')[0]) }}{% endif %}",
                    "url": "",
                    "source": "{{vars.item._source.source_name}}",
                    "comment": "{% if 'appinitdlls' in vars.item._index %}SIEM query indicated AppInit DLL key value {{vars.item._source.event_data.Details}} was added to key {{vars.item._source.event_data.TargetObject}} on {{vars.item._source.computer_name | regex_search('([^.]+)')}} at {{vars.item._source.event_data.UtcTime}}.{% elif 'hiddenfilesanddirectories' in vars.item._index %}SIEM query indicated attrib.exe was used to make a file or directory hidden on {{vars.item._source.computer_name}} at {{vars.item._source.event_data.UtcTime}}.{% elif 'netshhelperdll' in vars.item._index %}SIEM query indicated Netsh helper DLL key value {{vars.item._source.event_data.Details}} was added to key {{vars.item.TargetObject}} on {{vars.item._source.beat.hostname}} at {{vars.item._source.event_data.UtcTime}}.{% else %}SIEM queried for Sysmon logs indicating an .scr file was executed from a nonstandard directory on host {{vars.item._source.beat.hostname}} at {{ arrow.get(vars.item._source.event_data.UtcTime).timestamp }}.{% endif %}",
                    "huntIRI": "{{vars.steps.Create_Hunt_Record['@id']}}",
                    "service": "",
                    "filePath": "{{vars.item._source.image_path}}",
                    "hostName": "{{vars.item._source.beat.hostname}}",
                    "sourceIP": "",
                    "userName": "{{vars.item._source.username}}",
                    "alertName": "{% if 'appinitdlls' in vars.item._index %}ATT&CK-AppInit DLLs-{% if vars.item._source.event_data.Details %}{{vars.item._source.event_data.Details}} key value added{% else %}key created{% endif %}{% elif 'hiddenfilesanddirectories' in vars.item._index %}ATT&CK-Hidden Files and Directories-Attrib used to hide {{vars.item._source.event_data.CommandLine | regex_search('(?<=\\+h\\s)[^\\\\\\\/:*?\"<>|\\r\\n]+$')}}{% elif 'netshhelperdll' in vars.item._index %}ATT&CK-Netsh Helper DLL-{{vars.item._source.image_path.split(\"\\\\\")[-1] }} created or modified a Netsh Registry key{% else %}ATT&CK-Screensaver-{{vars.item._source.image_path.split(\"\\\\\")[-1] }} executed as an .SCR file by {{vars.item._source.parent_image_path.split(\"\\\\\")[-1] }}{% endif %}",
                    "alertType": "{{\"AlertType\" | picklist(\"Event Triggered Execution\", \"@id\")}}",
                    "epochTime": "{{ arrow.get(vars.item._source.event_data.UtcTime).timestamp }}",
                    "eventName": "",
                    "eventTime": "{{ vars.item._source.event_data.UtcTime}}",
                    "processID": "{{vars.item._source.event_data.ProcessId}}",
                    "technique": "{% if 'appinitdlls' in vars.item._index %}AppInit DLL (Key Add\/Mod){% elif 'hiddenfilesanddirectories' in vars.item._index %}Hidden Files and Directories (attrib.exe){% elif 'netshhelperdll' in vars.item._index %}Netsh Helper DLL (Key Add\/Mod){% else %}Screensaver-.scr File Executed{% endif %}",
                    "sourceData": "{{vars.item}}",
                    "sourceTool": "{{vars.item._source.source_name}}",
                    "commandline": "{{vars.item._source.event_data.CommandLine}}",
                    "description": "{% if 'appinitdlls' in vars.item._index %}An AppInit DLL registry key was modified\/added. This is potentially unusual behavior in most networks and could be used by an adversary to achieve persistence. The added\/modified registry key value should be evaluated to determine its legitimacy.{% elif 'hiddenfilesanddirectories' in vars.item._index %}Attrib.exe was used to make a file or directory hidden. This could be an attempt by an adversary to hide files or directories in an attempt to conceal tools or data. This technique may be used to achieve persistence or evade superficial analysis and detection. The file or directory being hidden by attrib.exe should be evaluated to determine its legitimacy.{% elif 'netshhelperdll' in vars.item._index %}A Netsh DLL helper registry key was modified\/added. This is potentially unusual behavior in most networks and could be used by an adversary to achieve persistence. The added\/modified registry key value should be evaluated to determine its legitimacy.{% else %}An attempt to execute a screensaver file (.scr) from a nonstandard directory was observed. Screensaver files are portable executables that are stored in specific directories in a traditional Windows environment. Execution of a .scr file from outside those directories is suspicious and the host that generated this alert should be investigated for signs of compromise.{% endif %}",
                    "processGUID": "{{vars.item._source.event_data.ProcessGuid}}",
                    "processName": "{{vars.item._source.image_path.split(\"\\\\\")[-1] }}",
                    "registryKey": "",
                    "sourceImage": "{{ vars.item._source.event_data.SourceImage | replace( \"\\\\\", \"\\\\\\\\\" )}}",
                    "targetImage": "{{ vars.item._source.event_data.TargetImage | replace( \"\\\\\", \"\\\\\\\\\" )}}",
                    "computerName": "{{vars.item._source.computer_name}}",
                    "destinationIP": "",
                    "mitre_tech_id": "{% if 'appinitdlls' in vars.item._index %}T1546.010{% elif 'hiddenfilesanddirectories' in vars.item._index %}T1546.001{% elif 'netshhelperdll' in vars.item._index %}T1546.007{% else %}T1546.002{% endif %}",
                    "parentProcess": "{{vars.item._source.parent_image_path}}",
                    "scheduledTask": "",
                    "bitstransferid": "",
                    "parentProcessID": "{{vars.item._source.event_data.ParentProcessId}}",
                    "bytestransferred": "",
                    "registryKeyValue": "",
                    "parentCommandLine": "{{vars.item._source.event_data.ParentCommandLine}}",
                    "decodedCommandLine": "",
                    "mitreTechniqueData": "{% if 'appinitdlls' in vars.item._index %}{\n    \"id\": 407,\n    \"@id\": \"\/api\/3\/mitre_sub_techniques\/cc89ecbd-3d33-4a41-bcca-001e702d18fd\",\n    \"name\": \"AppInit DLLs\",\n    \"uuid\": \"cc89ecbd-3d33-4a41-bcca-001e702d18fd\",\n    \"@type\": \"Subtechnique\",\n    \"capecId\": null,\n    \"created\": 1579877545,\n    \"mitreId\": \"T1546.010\",\n    \"myNotes\": null,\n    \"version\": \"1.0\",\n    \"detection\": \"Monitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process. Monitor the AppInit_DLLs Registry values for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as <code>RegCreateKeyEx<\/code> and <code>RegSetValueEx<\/code>. (Citation: Elastic Process Injection July 2017)\\n\\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs. (Citation: TechNet Autoruns) \\n\\nLook for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.\",\n    \"platforms\": \"Windows\",\n    \"recordTags\": [],\n    \"dataSources\": \"Process: Process Creation, Windows Registry: Windows Registry Key Modification, Command: Command Execution, Module: Module Load\",\n    \"description\": \"Adversaries may establish persistence and\/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppInit_DLLs<\/code> value in the Registry keys <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows<\/code> or <code>HKEY_LOCAL_MACHINE\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows<\/code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Elastic Process Injection July 2017)\\n\\nSimilar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry) Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. \\n\\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)\",\n    \"lastModified\": 1605032971,\n    \"parentTechnique\": {\n      \"id\": 238,\n      \"@id\": \"\/api\/3\/mitre_techniques\/b6301b64-ef57-4cce-bb0b-77026f14a8db\",\n      \"name\": \"Event Triggered Execution\",\n      \"uuid\": \"b6301b64-ef57-4cce-bb0b-77026f14a8db\",\n      \"@type\": \"Technique\",\n      \"notes\": null,\n      \"capecId\": null,\n      \"created\": 1579727063,\n      \"mitreId\": \"T1546\",\n      \"version\": \"1.1\",\n      \"detection\": \"Monitoring for additions or modifications of mechanisms that could be used to trigger event-based execution, especially the addition of abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network. Also look for changes that do not line up with updates, patches, or other planned administrative activity. \\n\\nThese mechanisms may vary by OS, but are typically stored in central repositories that store configuration information such as the Windows Registry, Common Information Model (CIM), and\/or specific named files, the last of which can be hashed and compared to known good values. \\n\\nMonitor for processes, API\/System calls, and other common ways of manipulating these event repositories. \\n\\nTools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.  \\n\\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement. \",\n      \"platforms\": \"Linux, macOS, Windows\",\n      \"recordTags\": [],\n      \"dataSources\": \"Process: Process Creation, Windows Registry: Windows Registry Key Modification, Command: Command Execution, File: File Creation, File: File Modification, WMI: WMI Creation, File: File Metadata, Module: Module Load\",\n      \"description\": \"Adversaries may establish persistence and\/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications\/binaries. \\n\\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create\/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\\n\\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. \",\n      \"lastModified\": 1634415074,\n      \"permissionsRequired\": null\n    },\n    \"permissionsRequired\": \"Administrator\"\n  }{% elif 'hiddenfilesanddirectories' in vars.item._index %}{\n    \"id\": 336,\n    \"@id\": \"\/api\/3\/mitre_sub_techniques\/98034fef-d9fb-4667-8dc4-2eab6231724c\",\n    \"name\": \"Change Default File Association\",\n    \"uuid\": \"98034fef-d9fb-4667-8dc4-2eab6231724c\",\n    \"@type\": \"Subtechnique\",\n    \"capecId\": null,\n    \"created\": 1579873247,\n    \"mitreId\": \"T1546.001\",\n    \"myNotes\": null,\n    \"version\": \"1.0\",\n    \"detection\": \"Collect and analyze changes to Registry keys that associate file extensions to default applications for execution and correlate with unknown process launch activity or unusual file types for that process.\\n\\nUser file association preferences are stored under <code> [HKEY_CURRENT_USER]\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\FileExts<\/code> and override associations configured under <code>[HKEY_CLASSES_ROOT]<\/code>. Changes to a user's preference will occur under this entry's subkeys.\\n\\nAlso look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.\",\n    \"platforms\": \"Windows\",\n    \"recordTags\": [],\n    \"dataSources\": \"Process: Process Creation, Windows Registry: Windows Registry Key Modification, Command: Command Execution\",\n    \"description\": \"Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access (Citation: Microsoft Change Default Programs) (Citation: Microsoft File Handlers) or by administrators using the built-in assoc utility. (Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\\n\\nSystem file associations are listed under <code>HKEY_CLASSES_ROOT\\\\.[extension]<\/code>, for example <code>HKEY_CLASSES_ROOT\\\\.txt<\/code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT\\\\[handler]<\/code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT\\\\[handler]\\\\shell\\\\[action]\\\\command<\/code>. For example: \\n* <code>HKEY_CLASSES_ROOT\\\\txtfile\\\\shell\\\\open\\\\command<\/code>\\n* <code>HKEY_CLASSES_ROOT\\\\txtfile\\\\shell\\\\print\\\\command<\/code>\\n* <code>HKEY_CLASSES_ROOT\\\\txtfile\\\\shell\\\\printto\\\\command<\/code>\\n\\nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands. (Citation: TrendMicro TROJ-FAKEAV OCT 2012)\",\n    \"lastModified\": 1619707779,\n    \"parentTechnique\": {\n      \"id\": 238,\n      \"@id\": \"\/api\/3\/mitre_techniques\/b6301b64-ef57-4cce-bb0b-77026f14a8db\",\n      \"name\": \"Event Triggered Execution\",\n      \"uuid\": \"b6301b64-ef57-4cce-bb0b-77026f14a8db\",\n      \"@type\": \"Technique\",\n      \"notes\": null,\n      \"capecId\": null,\n      \"created\": 1579727063,\n      \"mitreId\": \"T1546\",\n      \"version\": \"1.1\",\n      \"detection\": \"Monitoring for additions or modifications of mechanisms that could be used to trigger event-based execution, especially the addition of abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network. Also look for changes that do not line up with updates, patches, or other planned administrative activity. \\n\\nThese mechanisms may vary by OS, but are typically stored in central repositories that store configuration information such as the Windows Registry, Common Information Model (CIM), and\/or specific named files, the last of which can be hashed and compared to known good values. \\n\\nMonitor for processes, API\/System calls, and other common ways of manipulating these event repositories. \\n\\nTools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.  \\n\\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement. \",\n      \"platforms\": \"Linux, macOS, Windows\",\n      \"recordTags\": [],\n      \"dataSources\": \"Process: Process Creation, Windows Registry: Windows Registry Key Modification, Command: Command Execution, File: File Creation, File: File Modification, WMI: WMI Creation, File: File Metadata, Module: Module Load\",\n      \"description\": \"Adversaries may establish persistence and\/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications\/binaries. \\n\\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create\/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\\n\\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. \",\n      \"lastModified\": 1634415074,\n      \"permissionsRequired\": null\n    },\n    \"permissionsRequired\": \"Administrator, SYSTEM, User\"\n  }{% elif 'netshhelperdll' in vars.item._index %}{\n    \"id\": 465,\n    \"@id\": \"\/api\/3\/mitre_sub_techniques\/f63fe421-b1d1-45c0-b8a7-02cd16ff2bed\",\n    \"name\": \"Netsh Helper DLL\",\n    \"uuid\": \"f63fe421-b1d1-45c0-b8a7-02cd16ff2bed\",\n    \"@type\": \"Subtechnique\",\n    \"capecId\": null,\n    \"created\": 1579876011,\n    \"mitreId\": \"T1546.007\",\n    \"myNotes\": null,\n    \"version\": \"1.0\",\n    \"detection\": \"It is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the <code>HKLM\\\\SOFTWARE\\\\Microsoft\\\\Netsh<\/code> registry key for any new or suspicious entries that do not correlate with known system files or benign software. (Citation: Demaske Netsh Persistence)\",\n    \"platforms\": \"Windows\",\n    \"recordTags\": [],\n    \"dataSources\": \"Process: Process Creation, Windows Registry: Windows Registry Key Modification, Command: Command Execution, Module: Module Load\",\n    \"description\": \"Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. (Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\\\SOFTWARE\\\\Microsoft\\\\Netsh<\/code>.\\n\\nAdversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality. (Citation: Github Netsh Helper CS Beacon)(Citation: Demaske Netsh Persistence)\",\n    \"lastModified\": 1619707779,\n    \"parentTechnique\": {\n      \"id\": 238,\n      \"@id\": \"\/api\/3\/mitre_techniques\/b6301b64-ef57-4cce-bb0b-77026f14a8db\",\n      \"name\": \"Event Triggered Execution\",\n      \"uuid\": \"b6301b64-ef57-4cce-bb0b-77026f14a8db\",\n      \"@type\": \"Technique\",\n      \"notes\": null,\n      \"capecId\": null,\n      \"created\": 1579727063,\n      \"mitreId\": \"T1546\",\n      \"version\": \"1.1\",\n      \"detection\": \"Monitoring for additions or modifications of mechanisms that could be used to trigger event-based execution, especially the addition of abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network. Also look for changes that do not line up with updates, patches, or other planned administrative activity. \\n\\nThese mechanisms may vary by OS, but are typically stored in central repositories that store configuration information such as the Windows Registry, Common Information Model (CIM), and\/or specific named files, the last of which can be hashed and compared to known good values. \\n\\nMonitor for processes, API\/System calls, and other common ways of manipulating these event repositories. \\n\\nTools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.  \\n\\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement. \",\n      \"platforms\": \"Linux, macOS, Windows\",\n      \"recordTags\": [],\n      \"dataSources\": \"Process: Process Creation, Windows Registry: Windows Registry Key Modification, Command: Command Execution, File: File Creation, File: File Modification, WMI: WMI Creation, File: File Metadata, Module: Module Load\",\n      \"description\": \"Adversaries may establish persistence and\/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications\/binaries. \\n\\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create\/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\\n\\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. \",\n      \"lastModified\": 1634415074,\n      \"permissionsRequired\": null\n    },\n    \"permissionsRequired\": \"Administrator, SYSTEM\"\n  }{% else %}{\n    \"id\": 408,\n    \"@id\": \"\/api\/3\/mitre_sub_techniques\/ce4b7013-640e-48a9-b501-d0025a95f4bf\",\n    \"name\": \"Screensaver\",\n    \"uuid\": \"ce4b7013-640e-48a9-b501-d0025a95f4bf\",\n    \"@type\": \"Subtechnique\",\n    \"capecId\": null,\n    \"created\": 1579873861,\n    \"mitreId\": \"T1546.002\",\n    \"myNotes\": null,\n    \"version\": \"1.0\",\n    \"detection\": \"Monitor process execution and command-line parameters of .scr files. Monitor changes to screensaver configuration changes in the Registry that may not correlate with typical user behavior.\\n\\nTools such as Sysinternals Autoruns can be used to detect changes to the screensaver binary path in the Registry. Suspicious paths and PE files may indicate outliers among legitimate screensavers in a network and should be investigated.\",\n    \"platforms\": \"Windows\",\n    \"recordTags\": [],\n    \"dataSources\": \"Process: Process Creation, Windows Registry: Windows Registry Key Modification, Command: Command Execution, File: File Creation, File: File Modification\",\n    \"description\": \"Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <code>C:\\\\Windows\\\\System32\\\\<\/code>, and <code>C:\\\\Windows\\\\sysWOW64\\\\<\/code>  on 64-bit Windows systems, along with screensavers included with base Windows installations.\\n\\nThe following screensaver settings are stored in the Registry (<code>HKCU\\\\Control Panel\\\\Desktop\\\\<\/code>) and could be manipulated to achieve persistence:\\n\\n* <code>SCRNSAVE.exe<\/code> - set to malicious PE path\\n* <code>ScreenSaveActive<\/code> - set to '1' to enable the screensaver\\n* <code>ScreenSaverIsSecure<\/code> - set to '0' to not require a password to unlock\\n* <code>ScreenSaveTimeout<\/code> - sets user inactivity timeout before screensaver is executed\\n\\nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity. (Citation: ESET Gazer Aug 2017)\",\n    \"lastModified\": 1619707779,\n    \"parentTechnique\": {\n      \"id\": 238,\n      \"@id\": \"\/api\/3\/mitre_techniques\/b6301b64-ef57-4cce-bb0b-77026f14a8db\",\n      \"name\": \"Event Triggered Execution\",\n      \"uuid\": \"b6301b64-ef57-4cce-bb0b-77026f14a8db\",\n      \"@type\": \"Technique\",\n      \"notes\": null,\n      \"capecId\": null,\n      \"created\": 1579727063,\n      \"mitreId\": \"T1546\",\n      \"version\": \"1.1\",\n      \"detection\": \"Monitoring for additions or modifications of mechanisms that could be used to trigger event-based execution, especially the addition of abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network. Also look for changes that do not line up with updates, patches, or other planned administrative activity. \\n\\nThese mechanisms may vary by OS, but are typically stored in central repositories that store configuration information such as the Windows Registry, Common Information Model (CIM), and\/or specific named files, the last of which can be hashed and compared to known good values. \\n\\nMonitor for processes, API\/System calls, and other common ways of manipulating these event repositories. \\n\\nTools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.  \\n\\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement. \",\n      \"platforms\": \"Linux, macOS, Windows\",\n      \"recordTags\": [],\n      \"dataSources\": \"Process: Process Creation, Windows Registry: Windows Registry Key Modification, Command: Command Execution, File: File Creation, File: File Modification, WMI: WMI Creation, File: File Metadata, Module: Module Load\",\n      \"description\": \"Adversaries may establish persistence and\/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications\/binaries. \\n\\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create\/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\\n\\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. \",\n      \"lastModified\": 1634415074,\n      \"permissionsRequired\": null\n    },\n    \"permissionsRequired\": \"User\"\n  }{% endif %}"
                },
                "apply_async": false,
                "step_variables": [],
                "workflowReference": "\/api\/3\/workflows\/8f61e7f7-955b-4a81-947e-be12568e66b8"
            },
            "status": null,
            "top": "705",
            "left": "125",
            "stepType": "\/api\/3\/workflow_step_types\/74932bdc-b8b6-4d24-88c4-1a4dfbc524f3",
            "uuid": "89a18da0-b35c-488a-8224-833acbeca4ac",
            "id": 4473
        },
        {
            "@type": "WorkflowStep",
            "name": "Create Hunt Record",
            "description": null,
            "arguments": {
                "resource": {
                    "name": "Demo Hunt - {{vars.scenarioTitle}}",
                    "huntEnd": "{{arrow.get(vars.steps.Get_Hunt_Time_Range.input.huntEndDate).int_timestamp}}",
                    "__replace": "",
                    "huntStart": "{{arrow.get(vars.steps.Get_Hunt_Time_Range.input.huntStartDate).int_timestamp}}",
                    "timeCreated": "{{arrow.utcnow().int_timestamp}}"
                },
                "_showJson": false,
                "operation": "Overwrite",
                "collection": "\/api\/3\/hunt",
                "__recommend": [],
                "fieldOperation": {
                    "recordTags": "Overwrite"
                },
                "step_variables": []
            },
            "status": null,
            "top": "435",
            "left": "125",
            "stepType": "\/api\/3\/workflow_step_types\/2597053c-e718-44b4-8394-4d40fe26d357",
            "uuid": "3b435f69-af2a-4cff-a85b-0c882a196145",
            "id": 4474
        }
    ],
    "routes": [
        {
            "@type": "WorkflowRoute",
            "name": "Create Hunt Record -> Get Alert from SIEM",
            "targetStep": "\/api\/3\/workflow_steps\/e49fcad1-c386-4f37-9041-548dd3984e58",
            "sourceStep": "\/api\/3\/workflow_steps\/3b435f69-af2a-4cff-a85b-0c882a196145",
            "label": null,
            "isExecuted": false,
            "uuid": "1d94fd9d-db13-46ca-ada3-e102d939c3c6"
        },
        {
            "@type": "WorkflowRoute",
            "name": "Start -> Configuration",
            "targetStep": "\/api\/3\/workflow_steps\/57c7cc16-8855-4a6c-ab28-c217390e82ce",
            "sourceStep": "\/api\/3\/workflow_steps\/a96360d8-f353-4e36-9e08-426e38e1138d",
            "label": null,
            "isExecuted": false,
            "uuid": "db71aa67-5160-4270-96ef-af6e937bcc18"
        },
        {
            "@type": "WorkflowRoute",
            "name": "Get Alert from SIEM -> Create and Link Alert",
            "targetStep": "\/api\/3\/workflow_steps\/89a18da0-b35c-488a-8224-833acbeca4ac",
            "sourceStep": "\/api\/3\/workflow_steps\/e49fcad1-c386-4f37-9041-548dd3984e58",
            "label": null,
            "isExecuted": false,
            "uuid": "8e14155a-68cb-47aa-a499-b9c697bf7887"
        },
        {
            "@type": "WorkflowRoute",
            "name": "Configuration -> Get Hunt Time Range",
            "targetStep": "\/api\/3\/workflow_steps\/18d3fd35-6519-46a5-8a75-0477d9361ee2",
            "sourceStep": "\/api\/3\/workflow_steps\/57c7cc16-8855-4a6c-ab28-c217390e82ce",
            "label": null,
            "isExecuted": false,
            "uuid": "7b3f879e-9f3f-4c19-bc14-365b019db1c8"
        },
        {
            "@type": "WorkflowRoute",
            "name": "Create Alerts from Elastic -> Get Created Alert Data",
            "targetStep": "\/api\/3\/workflow_steps\/98252ae2-9b0f-411c-ba81-b86a53808453",
            "sourceStep": "\/api\/3\/workflow_steps\/89a18da0-b35c-488a-8224-833acbeca4ac",
            "label": null,
            "isExecuted": false,
            "uuid": "8202ad2d-aab1-43df-8d9b-f1bb528c761a"
        },
        {
            "@type": "WorkflowRoute",
            "name": "Get Hunt Time Range -> Create Hunt Record",
            "targetStep": "\/api\/3\/workflow_steps\/3b435f69-af2a-4cff-a85b-0c882a196145",
            "sourceStep": "\/api\/3\/workflow_steps\/18d3fd35-6519-46a5-8a75-0477d9361ee2",
            "label": "Submit",
            "isExecuted": false,
            "uuid": "2a7731b3-0c3a-4565-976d-1fc6b6e4b9ad"
        }
    ],
    "priority": "\/api\/3\/picklists\/2b563c61-ae2c-41c0-a85a-c9709585e3f2",
    "uuid": "d320bbe0-b5ee-4f95-a1bc-8725e85f6144",
    "recordTags": [
        "FSRSolutionPack",
        "mITREATT&CKThreatHunting-1.0.0",
        "Referenced"
    ],
    "id": 1122,
    "createUser": "\/api\/3\/people\/3451141c-bac6-467c-8d72-85e0fab569ce",
    "createDate": 1644165545,
    "modifyUser": "\/api\/3\/people\/3451141c-bac6-467c-8d72-85e0fab569ce",
    "modifyDate": 1644165545,
    "owners": [],
    "isPrivate": false
}